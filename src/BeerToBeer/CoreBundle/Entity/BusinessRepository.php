<?php

namespace BeerToBeer\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BusinessRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessRepository extends EntityRepository
{
	/**
	 * getClosestBusinesses($latitude, $longitude, $offset = 0, $limit = 10)
	 *
	 * S'utilise pour trouver les établissements les plus proches d'une position en donnant une limite
	 *
	 * float $latitude : la latitude de l'utilisateur
	 * float $longitude : la longitude de l'utilisateur
	 * int $offset : par où on commence à lire les résultats, à utiliser lors du lazy loading
	 * int $limit : le nombre d'établissements à afficher
	 *
	 **/
	public function getClosestBusinesses($latitude, $longitude, $offset = 0, $limit = 10) {

		$query = $this->_em->createQuery('
			SELECT bu, bb, h,
			GEO_DISTANCE(:latitude, :longitude, bu.latitude, bu.longitude) AS distance 
			FROM BeerToBeerCoreBundle:Business bu
			JOIN bu.beerBusinesses bb
			LEFT JOIN bu.horaires h
			ORDER BY distance, bb.prixHappyHour
			')
			->setParameter('latitude', $latitude)
		    ->setParameter('longitude', $longitude)
			->setFirstResult($offset)
			->setMaxResults($limit);

		$results =  $query->getArrayResult();

		// Render the results as the API wants it
		$businessesForApi = array();
		$i = 0;
		foreach ($results as $key => $result) {
			$businessesForApi[$i] = $result[0];
			$businessesForApi[$i]["distance"] = round($result["distance"]*1000, -1); // On ajoute la distance en mètres arrondi aux dizaines
			$businessesForApi[$i]["prixNormal"] = $businessesForApi[$i]["beerBusinesses"][0]["prixNormal"];
			$businessesForApi[$i]["prixHappyHour"] = $businessesForApi[$i]["beerBusinesses"][0]["prixHappyHour"];

			unset($businessesForApi[$i]["beerBusinesses"]);

			$i++;
		}

		return $businessesForApi;
	}

	public function getBusiness($id) {
		$query = $this->_em->createQuery('
			SELECT bu
			FROM BeerToBeerCoreBundle:Business bu
			WHERE bu.id = :id
			')
			->setParameter('id', $id)
			->setMaxResults(1);

		$result =  $query->getArrayResult();

		return $result;
	}
}
